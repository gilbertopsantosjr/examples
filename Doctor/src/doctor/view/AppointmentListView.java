/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package doctor.view;

import doctor.control.AppointmentCtrl;
import doctor.model.AppointmentModel;
import doctor.model.TeamModel;
import doctor.model.PatientModel;
import doctor.util.Functions;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Keilah
 */
public class AppointmentListView extends javax.swing.JFrame {

    private TeamModel login;
    private PatientModel patientFileModel;
    private AppointmentModel appointmentModel;
    private AppointmentCtrl appointmentCtrl;
    
    /**
     * Creates new form DoctorView
     */
    public AppointmentListView(TeamModel loginParam) {
        initComponents();
        appointmentCtrl = new AppointmentCtrl();
        login = loginParam;
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        dateField.setValue(sdf.format(new Date()));
        
        if(loginParam.getProfile().equalsIgnoreCase("Secretary")){
            newAppointmentButton.setVisible(true);
            editAppointmentButton.setVisible(true); 
            writeNotePrescription.setVisible(false);
        } else {
            newAppointmentButton.setVisible(false);
            editAppointmentButton.setVisible(false);
            writeNotePrescription.setVisible(true);
        }
        
        if ( loginParam.getProfile().equalsIgnoreCase("Pharmacist") ) {
            writeNotePrescription.setText(" View Appointment ");
        }
        
        loadPatients();
    }

    private void loadPatients() {
        try {
            List<AppointmentModel> list = appointmentCtrl.getAppointments(getLogin());

            Object[] appointments = list.toArray();
            //appointments.length is a number of records on database 
            //3 is a number of coluns that should be shown in this Jtable
            Object[][] values = new Object[appointments.length][4];
            int count = 0;
            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy HH:MM"); 
            for (AppointmentModel appointment : list) {
                int age = Functions.calcAge( appointment.getPatient().getDateOfBirth() );
                // get values from the Appointment Object and put on 'values of JTable
                values[count] = new Object[] {appointment.getPatient().getId(), appointment.getPatient().getName(), age, sdf.format(appointment.getDateOfAppintment())};
                count++;
            }
            
            DefaultTableModel model = new javax.swing.table.DefaultTableModel(
                values,
                new String[]{"", "Patient's name", "Age", "Time"}
            )
            {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }
            };
                    
            jTable1.setModel(model);
            jTable1.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            jTable1.getSelectionModel().addListSelectionListener(
                    new ListSelectionListener() {
                        @Override
                        public void valueChanged(ListSelectionEvent e) {
                            String idAppointment = null;
                            int selectedRow = jTable1.getSelectedRow();                       
                                idAppointment = String.valueOf( jTable1.getValueAt(selectedRow, 0) );

                            setAppointmentModel ( appointmentCtrl.getByPatientId(Integer.valueOf(idAppointment) )  );
                        }
                });
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, " System failure ! \n " + e.getMessage());
        }
    }

    public TeamModel getLogin() {
        return login;
    }

    public void setLogin(TeamModel login) {
        this.login = login;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        dateField = new javax.swing.JFormattedTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        writeNotePrescription = new javax.swing.JButton();
        logoutButton = new javax.swing.JButton();
        newAppointmentButton = new javax.swing.JButton();
        editAppointmentButton = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Date:");

        jLabel2.setText("Find Patient:");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Patient's name", "Age", "Time"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        writeNotePrescription.setText("Write Prescription");
        writeNotePrescription.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                writeNotePrescriptionActionPerformed(evt);
            }
        });

        logoutButton.setText("Logout");
        logoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutButtonActionPerformed(evt);
            }
        });

        newAppointmentButton.setText("Create new appointment");
        newAppointmentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newAppointmentButtonActionPerformed(evt);
            }
        });

        editAppointmentButton.setText("Edit appointment");
        editAppointmentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editAppointmentButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(logoutButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(93, 93, 93)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel1))
                                .addGap(38, 38, 38)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(dateField)
                                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(newAppointmentButton)
                                        .addComponent(writeNotePrescription)
                                        .addComponent(editAppointmentButton)))))
                        .addGap(0, 73, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(31, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(dateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(writeNotePrescription)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(newAppointmentButton)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(logoutButton))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editAppointmentButton)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void writeNotePrescriptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_writeNotePrescriptionActionPerformed
        if(getAppointmentModel()!=null){
            AppointmentPatientFileView patient = new AppointmentPatientFileView(getAppointmentModel(), getLogin());
            Functions.showScreen(patient);
        } else 
           JOptionPane.showMessageDialog(null, " System failure ! \n Select a patient. " );
    }//GEN-LAST:event_writeNotePrescriptionActionPerformed

    private void logoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutButtonActionPerformed
        dispose();
        Functions.logout();
    }//GEN-LAST:event_logoutButtonActionPerformed

    private void newAppointmentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newAppointmentButtonActionPerformed
        AppointmentFormView formView = new AppointmentFormView(null);
        Functions.showScreen(formView);        
    }//GEN-LAST:event_newAppointmentButtonActionPerformed

    private void editAppointmentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editAppointmentButtonActionPerformed
        if(getAppointmentModel()!= null){
            AppointmentFormView formView = new AppointmentFormView(getAppointmentModel());
            Functions.showScreen(formView); 
        } else 
           JOptionPane.showMessageDialog(null, " System failure ! \n Select a patient. " );
    }//GEN-LAST:event_editAppointmentButtonActionPerformed

    public AppointmentModel getAppointmentModel() {
        return appointmentModel;
    }

    public void setAppointmentModel(AppointmentModel appointmentModel) {
        this.appointmentModel = appointmentModel;
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFormattedTextField dateField;
    private javax.swing.JToggleButton editAppointmentButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JButton logoutButton;
    private javax.swing.JButton newAppointmentButton;
    private javax.swing.JButton writeNotePrescription;
    // End of variables declaration//GEN-END:variables

   
}
